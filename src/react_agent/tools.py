"""This module provides example tools for web scraping and search functionality.

It includes a basic Tavily search function (as an example)

These tools are intended as free examples to get started. For production use,
consider implementing more robust and specialized tools tailored to your needs.
"""

from typing import Any, Callable, List, Optional, cast
import datetime
import json
import re

from langchain_tavily import TavilySearch  # type: ignore[import-not-found]
from langgraph.runtime import get_runtime

from react_agent.context import Context


async def search(query: str) -> Optional[dict[str, Any]]:
    """Search for general web results.

    This function performs a search using the Tavily search engine, which is designed
    to provide comprehensive, accurate, and trusted results. It's particularly useful
    for answering questions about current events.
    """
    runtime = get_runtime(Context)
    wrapped = TavilySearch(max_results=runtime.context.max_search_results)
    return cast(dict[str, Any], await wrapped.ainvoke({"query": query}))


async def get_current_time() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ –ú–æ—Å–∫–≤–µ."""
    now = datetime.datetime.now()
    return f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)"


async def calculate(expression: str) -> str:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: +, -, *, /, **, (), sqrt, sin, cos.
    –ü—Ä–∏–º–µ—Ä: calculate("2 + 3 * 4") –≤–µ—Ä–Ω–µ—Ç "14"
    """
    try:
        import math
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        safe_dict = {
            "abs": abs, "round": round, "min": min, "max": max,
            "sum": sum, "pow": pow, "sqrt": math.sqrt,
            "sin": math.sin, "cos": math.cos, "tan": math.tan,
            "pi": math.pi, "e": math.e
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        forbidden = ["import", "exec", "eval", "__", "open", "file"]
        if any(word in expression.lower() for word in forbidden):
            return "–û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"
        
        result = eval(expression, {"__builtins__": {}}, safe_dict)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"


async def extract_tender_info(text: str) -> str:
    """–ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    
    –ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö, —Å—Ä–æ–∫–∞—Ö, –∑–∞–∫–∞–∑—á–∏–∫–µ –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.
    """
    try:
        info = {"–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": {}}
        
        # –ü–æ–∏—Å–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
        money_patterns = [
            r'(\d+(?:\s\d{3})*(?:[,\.]\d+)?)\s*(?:—Ä—É–±|‚ÇΩ|—Ä—É–±–ª)',
            r'(\d+(?:\s\d{3})*(?:[,\.]\d+)?)\s*(?:—Ç—ã—Å|–º–ª–Ω|–º–ª—Ä–¥)',
            r'(\d+(?:\s\d{3})*(?:[,\.]\d+)?)\s*(?:–µ–≤—Ä–æ|‚Ç¨)',
            r'(\d+(?:\s\d{3})*(?:[,\.]\d+)?)\s*(?:–¥–æ–ª–ª|\$)'
        ]
        
        amounts = []
        for pattern in money_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            amounts.extend(matches)
        
        if amounts:
            info["–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]["—Å—É–º–º—ã"] = amounts[:5]
        
        # –ü–æ–∏—Å–∫ –¥–∞—Ç
        date_patterns = [
            r'\d{1,2}[\.\/\-]\d{1,2}[\.\/\-]\d{2,4}',
            r'\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}'
        ]
        
        dates = []
        for pattern in date_patterns:
            matches = re.findall(pattern, text)
            dates.extend(matches)
        
        if dates:
            info["–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]["–¥–∞—Ç—ã"] = dates[:3]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
        tender_keywords = [
            '–∑–∞–∫–∞–∑—á–∏–∫', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ø–æ–¥—Ä—è–¥—á–∏–∫', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
            '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '–¥–æ–≥–æ–≤–æ—Ä', '—Ç–µ–Ω–¥–µ—Ä', '–∫–æ–Ω–∫—É—Ä—Å', '–∞—É–∫—Ü–∏–æ–Ω',
            '–∑–∞–∫—É–ø–∫–∞', '–ø–æ—Å—Ç–∞–≤–∫–∞', '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ'
        ]
        
        found_keywords = []
        for keyword in tender_keywords:
            if keyword in text.lower():
                found_keywords.append(keyword)
        
        if found_keywords:
            info["–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]["–∫–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞"] = found_keywords
        
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —É—Å–ª–æ–≤–∏–π
        requirements = []
        req_patterns = [
            r'—Ç—Ä–µ–±–æ–≤–∞–Ω–∏[–µ—è].*?(?:[\.!?]|$)',
            r'—É—Å–ª–æ–≤–∏[–µ—è].*?(?:[\.!?]|$)',
            r'–∫—Ä–∏—Ç–µ—Ä–∏[–∏–π].*?(?:[\.!?]|$)'
        ]
        
        for pattern in req_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE | re.DOTALL)
            requirements.extend(matches[:2])
        
        if requirements:
            info["–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"] = requirements
        
        if not info["–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]:
            return "–í —Ç–µ–∫—Å—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ"
        
        return json.dumps(info, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


async def format_tender_report(title: str, budget: str, deadline: str, description: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–Ω–¥–µ—Ä—É.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–Ω–¥–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.
    """
    try:
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        
        report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        –û–¢–ß–ï–¢ –ü–û –¢–ï–ù–î–ï–†–£                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã –ù–ê–ó–í–ê–ù–ò–ï: {title}

üí∞ –ë–Æ–î–ñ–ï–¢: {budget}

üìÖ –°–†–û–ö –ü–û–î–ê–ß–ò: {deadline}

üìù –û–ü–ò–°–ê–ù–ò–ï:
{description}

‚è∞ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {current_time}

üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤
‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        """.strip()
        
        return report
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"


async def check_tender_deadline(deadline_str: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Ç–µ–Ω–¥–µ—Ä–∞.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY' –∏–ª–∏ 'YYYY-MM-DD' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
    """
    try:
        from datetime import datetime, timedelta
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        date_formats = ['%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y', '%d-%m-%Y']
        deadline_date = None
        
        for fmt in date_formats:
            try:
                deadline_date = datetime.strptime(deadline_str.strip(), fmt)
                break
            except ValueError:
                continue
        
        if not deadline_date:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {deadline_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD"
        
        today = datetime.now()
        days_left = (deadline_date - today).days
        
        if days_left < 0:
            return f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª {abs(days_left)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ({deadline_str})"
        elif days_left == 0:
            return f"üî• –°–†–û–ß–ù–û: –î–µ–¥–ª–∞–π–Ω –°–ï–ì–û–î–ù–Ø ({deadline_str})"
        elif days_left == 1:
            return f"‚è∞ –°–†–û–ß–ù–û: –î–µ–¥–ª–∞–π–Ω –ó–ê–í–¢–†–ê ({deadline_str})"
        elif days_left <= 7:
            return f"‚ö° –í–ê–ñ–ù–û: –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π ({deadline_str})"
        elif days_left <= 30:
            return f"üìÖ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π ({deadline_str})"
        else:
            return f"üìÜ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π ({deadline_str})"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞: {str(e)}"


async def read_file_content(file_path: str) -> str:
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .md, .json, .csv, .py, .js, .html –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.
    """
    try:
        import os
        from pathlib import Path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            return f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = Path(file_path).suffix.lower()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è
        safe_extensions = {'.txt', '.md', '.json', '.csv', '.py', '.js', '.html', '.xml', '.yml', '.yaml', '.log', '.cfg', '.ini'}
        
        if file_extension not in safe_extensions:
            return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(safe_extensions)}"
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            content = file.read()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
        if len(content) > 10000:
            content = content[:10000] + "\n... [—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤]"
        
        return f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path}:\n\n{content}"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"


async def analyze_document(file_path: str) -> str:
    """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    
    –†–∞–±–æ—Ç–∞–µ—Ç —Å PDF, DOCX, TXT —Ñ–∞–π–ª–∞–º–∏. –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–∞—Ö, –¥–æ–≥–æ–≤–æ—Ä–∞—Ö, —Ü–µ–Ω–∞—Ö.
    """
    try:
        import os
        from pathlib import Path
        
        if not os.path.exists(file_path):
            return f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
        
        file_extension = Path(file_path).suffix.lower()
        content = ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        if file_extension == '.txt':
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
                
        elif file_extension == '.pdf':
            try:
                import PyPDF2
                with open(file_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    for page in pdf_reader.pages:
                        content += page.extract_text() + "\n"
            except ImportError:
                return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyPDF2: pip install PyPDF2"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {str(e)}"
                
        elif file_extension in ['.docx', '.doc']:
            try:
                import docx
                doc = docx.Document(file_path)
                for paragraph in doc.paragraphs:
                    content += paragraph.text + "\n"
            except ImportError:
                return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-docx: pip install python-docx"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DOCX: {str(e)}"
        else:
            return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .pdf, .docx"
        
        if not content.strip():
            return "–î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø–æ–º–æ—â—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        analysis = await extract_tender_info(content)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        word_count = len(content.split())
        char_count = len(content)
        
        result = f"""
üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê: {Path(file_path).name}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {char_count:,}
‚Ä¢ –°–ª–æ–≤: {word_count:,}
‚Ä¢ –¢–∏–ø: {file_extension.upper()}

{analysis}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å—É–º–º—ã
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        """.strip()
        
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"


async def list_files_in_directory(directory_path: str) -> str:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    try:
        import os
        from pathlib import Path
        
        if not os.path.exists(directory_path):
            return f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}"
        
        if not os.path.isdir(directory_path):
            return f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {directory_path}"
        
        files = []
        directories = []
        
        for item in os.listdir(directory_path):
            item_path = os.path.join(directory_path, item)
            if os.path.isfile(item_path):
                size = os.path.getsize(item_path)
                size_str = f"{size:,} –±–∞–π—Ç" if size < 1024 else f"{size/1024:.1f} –ö–ë" if size < 1024*1024 else f"{size/(1024*1024):.1f} –ú–ë"
                files.append(f"üìÑ {item} ({size_str})")
            elif os.path.isdir(item_path):
                directories.append(f"üìÅ {item}/")
        
        result = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {directory_path}\n\n"
        
        if directories:
            result += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join(directories) + "\n\n"
        
        if files:
            result += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join(files)
        else:
            result += "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏: {str(e)}"


async def process_uploaded_file(content: str, filename: str = "unknown", mime_type: str = "") -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (base64 –∏–ª–∏ —Ç–µ–∫—Å—Ç) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–∞–º–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ LangGraph Studio.
    """
    try:
        import base64
        import tempfile
        import os
        from pathlib import Path
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ MIME-—Ç–∏–ø—É –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        file_extension = Path(filename).suffix.lower() if filename != "unknown" else ""
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME —Ç–∏–ø—ã
        supported_types = {
            'text/plain': '.txt',
            'application/pdf': '.pdf', 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
            'application/msword': '.doc',
            'text/markdown': '.md',
            'application/json': '.json',
            'text/csv': '.csv'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ MIME-—Ç–∏–ø—É
        if mime_type in supported_types:
            file_extension = supported_types[mime_type]
        
        if not file_extension:
            return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {mime_type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(supported_types.keys())}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
            temp_path = temp_file.name
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if file_extension in ['.txt', '.md', '.json', '.csv']:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                temp_file.write(content.encode('utf-8'))
            else:
                # –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã (PDF, DOCX) - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
                try:
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:mime/type;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if ',' in content and 'base64' in content:
                        content = content.split(',', 1)[1]
                    
                    binary_data = base64.b64decode(content)
                    temp_file.write(binary_data)
                except Exception as e:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            result = await analyze_document(temp_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
            file_info = f"""
üìé –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô –§–ê–ô–õ: {filename}
üî§ MIME-—Ç–∏–ø: {mime_type}
üìä –†–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤
üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫: {file_extension.upper()}

{result}
            """.strip()
            
            return file_info
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"


async def extract_text_from_content(content: str, mime_type: str = "text/plain") -> str:
    """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if mime_type.startswith('text/') or mime_type == 'application/json':
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if len(content) > 50000:
                content = content[:50000] + "\n... [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
            return f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{content}"
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å process_uploaded_file
        return f"–î–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ '{mime_type}' –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤."
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


async def handle_file_upload(data: dict) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç LangGraph Studio –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        content = None
        filename = "unknown"
        mime_type = ""
        
        if isinstance(data, dict):
            # –§–æ—Ä–º–∞—Ç 1: {"content": "...", "filename": "...", "mime_type": "..."}
            content = data.get('content', data.get('data', ''))
            filename = data.get('filename', data.get('name', 'unknown'))
            mime_type = data.get('mime_type', data.get('type', ''))
            
            # –§–æ—Ä–º–∞—Ç 2: {"type": "application/pdf", "data": "base64..."}
            if not content and 'data' in data:
                content = data['data']
                mime_type = data.get('type', mime_type)
                
        elif isinstance(data, str):
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
            content = data
            mime_type = "text/plain"
            
        if not content:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return await process_uploaded_file(content, filename, mime_type)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"


async def analyze_uploaded_content(content_data) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª—é–±–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
    
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        if isinstance(content_data, str):
            if len(content_data) > 10000:
                content_data = content_data[:10000] + "\n... [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
            tender_info = await extract_tender_info(content_data)
            
            return f"""
üìã –ê–ù–ê–õ–ò–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–û–ì–û –°–û–î–ï–†–ñ–ò–ú–û–ì–û:
üìä –†–∞–∑–º–µ—Ä: {len(str(content_data)):,} —Å–∏–º–≤–æ–ª–æ–≤
üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(content_data).__name__}

{tender_info}
            """.strip()
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å - –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ  
        elif isinstance(content_data, dict):
            return await handle_file_upload(content_data)
            
        else:
            return f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ {type(content_data).__name__}: {str(content_data)[:500]}..."
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}"


async def process_any_file_content(**kwargs) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å –ª—é–±—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        possible_content_keys = ['content', 'data', 'file_content', 'text', 'body']
        possible_type_keys = ['mime_type', 'type', 'content_type', 'file_type']
        possible_name_keys = ['filename', 'name', 'file_name']
        
        content = None
        mime_type = ""
        filename = "unknown"
        
        # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for key in possible_content_keys:
            if key in kwargs and kwargs[key]:
                content = kwargs[key]
                break
                
        # –ò—â–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        for key in possible_type_keys:
            if key in kwargs and kwargs[key]:
                mime_type = kwargs[key]
                break
                
        # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        for key in possible_name_keys:
            if key in kwargs and kwargs[key]:
                filename = kwargs[key]
                break
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if not content and kwargs:
            first_value = next(iter(kwargs.values()))
            if isinstance(first_value, str):
                content = first_value
                mime_type = "text/plain"
            elif isinstance(first_value, dict):
                return await handle_file_upload(first_value)
        
        if not content:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞. –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(kwargs.keys())}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        return await process_uploaded_file(content, filename, mime_type)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(kwargs.keys())}"


async def debug_input_data(*args, **kwargs) -> str:
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç LangGraph Studio.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–µ—Ç Studio –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤.
    """
    try:
        debug_info = f"""
üîç –û–¢–õ–ê–î–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:

üìä –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (args):
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(args)}
–¢–∏–ø—ã: {[type(arg).__name__ for arg in args]}
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(args)[:1000]}{'...' if len(str(args)) > 1000 else ''}

üìã –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (kwargs):
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(kwargs)}
–ö–ª—é—á–∏: {list(kwargs.keys())}
–¢–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π: {dict((k, type(v).__name__) for k, v in kwargs.items())}

üî§ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ kwargs:
{str(kwargs)[:2000]}{'...' if len(str(kwargs)) > 2000 else ''}

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Studio.
        """.strip()
        
        return debug_info
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ: {str(e)}"


async def handle_file_content(file_data=None, **other_params) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –æ—à–∏–±–æ–∫.
    
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'.
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        debug_log = f"""
üìé –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í - –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
file_data type: {type(file_data).__name__}
file_data: {str(file_data)[:500]}...
other_params: {other_params}
        """
        
        # –ï—Å–ª–∏ file_data —Å–æ–¥–µ—Ä–∂–∏—Ç MIME-—Ç–∏–ø
        if hasattr(file_data, 'get') and callable(file_data.get):
            mime_type = file_data.get('type') or file_data.get('mime_type') or file_data.get('content_type', '')
            content = file_data.get('content') or file_data.get('data') or file_data.get('body', '')
            name = file_data.get('name') or file_data.get('filename', 'unknown')
            
            if mime_type == 'application/pdf':
                return f"""
{debug_log}

üéØ –û–ë–ù–ê–†–£–ñ–ï–ù PDF –§–ê–ô–õ!
MIME-—Ç–∏–ø: {mime_type}
–ò–º—è —Ñ–∞–π–ª–∞: {name}
–†–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(str(content))} —Å–∏–º–≤–æ–ª–æ–≤

üìã –ê–ù–ê–õ–ò–ó PDF:
–≠—Ç–æ PDF —Ñ–∞–π–ª. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...
                """.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π
        if isinstance(file_data, str) and 'application/pdf' in file_data:
            return f"""
{debug_log}

‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –°–¢–†–û–ö–ê –° application/pdf!
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å MIME-—Ç–∏–ø, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞.
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_data}
            """.strip()
        
        return f"""
{debug_log}

‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
–ù—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç.
        """.strip()
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"


async def handle_docx_content(file_data=None, **other_params) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è DOCX —Ñ–∞–π–ª–æ–≤.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Word –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å MIME-—Ç–∏–ø–æ–º application/vnd.openxmlformats-officedocument.wordprocessingml.document
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DOCX
        debug_log = f"""
üìù –û–ë–†–ê–ë–û–¢–ß–ò–ö DOCX –§–ê–ô–õ–û–í - –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
file_data type: {type(file_data).__name__}
file_data preview: {str(file_data)[:500]}...
other_params: {other_params}
        """
        
        # –ï—Å–ª–∏ file_data —Å–æ–¥–µ—Ä–∂–∏—Ç DOCX MIME-—Ç–∏–ø
        if hasattr(file_data, 'get') and callable(file_data.get):
            mime_type = file_data.get('type') or file_data.get('mime_type') or file_data.get('content_type', '')
            content = file_data.get('content') or file_data.get('data') or file_data.get('body', '')
            name = file_data.get('name') or file_data.get('filename', 'unknown.docx')
            
            if 'vnd.openxmlformats-officedocument.wordprocessingml.document' in mime_type:
                return f"""
{debug_log}

üìù –û–ë–ù–ê–†–£–ñ–ï–ù DOCX –§–ê–ô–õ!
MIME-—Ç–∏–ø: {mime_type}
–ò–º—è —Ñ–∞–π–ª–∞: {name}
–†–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(str(content))} —Å–∏–º–≤–æ–ª–æ–≤

üìã –ê–ù–ê–õ–ò–ó DOCX:
–≠—Ç–æ Word –¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...

üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ process_uploaded_file...
                """.strip()
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                try:
                    result = await process_uploaded_file(content, name, mime_type)
                    return f"{debug_log}\n\n‚úÖ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù DOCX:\n{result}"
                except Exception as e:
                    return f"{debug_log}\n\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å DOCX MIME-—Ç–∏–ø–æ–º
        if isinstance(file_data, str) and 'vnd.openxmlformats-officedocument.wordprocessingml.document' in file_data:
            return f"""
{debug_log}

‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –°–¢–†–û–ö–ê –° DOCX MIME-–¢–ò–ü–û–ú!
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å MIME-—Ç–∏–ø, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞.
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_data}
            """.strip()
        
        return f"""
{debug_log}

‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è DOCX.
–ù—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç.
        """.strip()
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ DOCX —Ñ–∞–π–ª–æ–≤: {str(e)}"


async def universal_file_handler(**kwargs) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    try:
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        file_data = None
        for key in kwargs:
            if kwargs[key] and (
                (isinstance(kwargs[key], dict)) or 
                (isinstance(kwargs[key], str) and ('application/' in kwargs[key] or 'text/' in kwargs[key]))
            ):
                file_data = kwargs[key]
                break
        
        if not file_data:
            return f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {list(kwargs.keys())}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        content_type = ""
        if isinstance(file_data, dict):
            content_type = file_data.get('type', file_data.get('mime_type', ''))
        elif isinstance(file_data, str):
            if 'application/pdf' in file_data:
                content_type = 'application/pdf'
            elif 'vnd.openxmlformats-officedocument.wordprocessingml.document' in file_data:
                content_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            elif 'text/' in file_data:
                content_type = 'text/plain'
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if 'pdf' in content_type:
            return await handle_file_content(file_data, **kwargs)
        elif 'vnd.openxmlformats-officedocument.wordprocessingml.document' in content_type:
            return await handle_docx_content(file_data, **kwargs)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await analyze_uploaded_content(file_data)
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"


async def process_any_content_type(content_or_data: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
    
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —ç—Ç–æ:
    - MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 
    - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    - –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å MIME-—Ç–∏–ø–æ–º
        if "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:" in content_or_data:
            mime_type = content_or_data.replace("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:", "").strip()
            
            response = f"""
üîß –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê MIME-–¢–ò–ü–ê: {mime_type}

üìã –≠—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–æ–≤.

üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
"""
            
            if "application/pdf" in mime_type:
                response += """
‚úÖ PDF —Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
- "–û–±—Ä–∞–±–æ—Ç–∞–π PDF —Ñ–∞–π–ª"
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç"
- "–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"
"""
            elif "vnd.openxmlformats-officedocument.wordprocessingml.document" in mime_type:
                response += """
‚úÖ Word DOCX —Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
- "–û–±—Ä–∞–±–æ—Ç–∞–π Word –¥–æ–∫—É–º–µ–Ω—Ç"  
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π DOCX —Ñ–∞–π–ª"
- "–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
"""
            elif "text/" in mime_type:
                response += """
‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
- "–ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
"""
            else:
                response += f"""
‚ö†Ô∏è –¢–∏–ø —Ñ–∞–π–ª–∞ {mime_type} —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- "–û–±—Ä–∞–±–æ—Ç–∞–π —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç"
- "–ò–∑–≤–ª–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
"""
            
            response += """

üöÄ –†–ï–®–ï–ù–ò–ï:
–ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å - —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
            """
            
            return response.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ MIME-—Ç–∏–ø
        elif content_or_data.startswith("application/") or content_or_data.startswith("text/"):
            return f"""
üìÑ –û–ë–ù–ê–†–£–ñ–ï–ù MIME-–¢–ò–ü: {content_or_data}

‚úÖ –≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏!
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            """.strip()
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        else:
            if len(content_or_data) > 100:
                # –ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                tender_analysis = await extract_tender_info(content_or_data)
                return f"""
üìã –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û:
–†–∞–∑–º–µ—Ä: {len(content_or_data)} —Å–∏–º–≤–æ–ª–æ–≤

{tender_analysis}
                """.strip()
            else:
                return f"""
üìù –ö–û–†–û–¢–ö–ò–ô –¢–ï–ö–°–¢: {content_or_data}

–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:
"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
                """.strip()
                
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}"


TOOLS: List[Callable[..., Any]] = [
    search,
    get_current_time, 
    calculate,
    extract_tender_info,
    format_tender_report,
    check_tender_deadline,
    read_file_content,
    analyze_document,
    list_files_in_directory,
    process_uploaded_file,
    extract_text_from_content,
    handle_file_upload,
    analyze_uploaded_content,
    process_any_file_content,
    debug_input_data,
    handle_file_content,
    handle_docx_content,
    universal_file_handler,
    process_any_content_type
]
